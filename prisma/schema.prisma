// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userBooks    UserBook[]
  friendsInitiated Friend[] @relation("FriendRequester")
  friendsReceived  Friend[] @relation("FriendAddressee")
  userBadges   UserBadge[]
  statsCache   StatsCache[]

  @@map("users")
}

model Book {
  id            String   @id @default(cuid())
  googleId      String?  @unique
  openLibraryId String?
  isbn10        String?
  isbn13        String?
  title         String
  authors       String[]
  publishedDate DateTime?
  pageCount     Int?
  coverUrl      String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userBooks UserBook[]

  @@map("books")
}

model UserBook {
  id         String     @id @default(cuid())
  userId     String
  bookId     String
  shelf      Shelf      @default(WANT)
  rating     Int?       // 0-10 scale (5 stars * 2 for half-stars)
  startedAt  DateTime?
  finishedAt DateTime?
  review     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("user_books")
}

model Friend {
  id           String       @id @default(cuid())
  requesterId  String
  addresseeId  String
  status       FriendStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  requester User @relation("FriendRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("FriendAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@map("friends")
}

model Badge {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  description String
  iconUrl     String?
  createdAt   DateTime @default(now())

  // Relations
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  grantedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model StatsCache {
  userId     String   @id
  year       Int
  booksRead  Int      @default(0)
  pagesRead  Int      @default(0)
  avgRating  Float?
  genres     Json?    // JSON object with genre counts
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year])
  @@map("stats_cache")
}

// Enums
enum Shelf {
  WANT
  READING
  READ
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
